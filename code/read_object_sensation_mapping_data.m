function read_object_sensation_mapping_data(data_folder,subject)

    voltageFile = 'voltageMonitorData.json';
    objects = {'images\cat.png','images\apple.png','images\key.png','images\towel.png','images\toast.png'};

    % determine what data to load
    if strcmp(subject,'P2')
        session = [7 8 9 10 11 12 15 16 17 19 20 21 22 23 24 27 28 29 30 31 32 33]; 
        stim_set = {{1}, {1}, {3}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, ...
                    {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};           
        block = {{3, 4, 5}, {3, 4}, {3, 4}, {3, 4, 5}, {3, 4, 5, 6}, {3, 4}, ...          
                 {3, 4}, {3, 4}, {3, 4, 5}, {3, 4}, {3, 4}, {3, 4}, {3, 4, 5},...
                 {3, 4, 5}, {3, 4, 5}, {3, 4, 5}, {3, 4, 5}, {3, 4}, {3, 4}, ...
                 {3, 4}, {3, 4}, {3, 4}};
        trials = {{{1, 2, 3}, {1, 2, 3}, {1, 2}},...
                 {{1, 2, 3}, {1, 2, 3}}, ...
                 {{1, 2, 3}, {1, 2, 3}}, ...     
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}...       
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}, {1, 2, 3}},... 
                 {{1, 2, 3}, {1, 2, 3}},...                      
                 {{1, 2, 3}, {1, 2, 3}},...                    
                 {{1, 2, 3}, {1, 2, 3}},...                      
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...          
                 {{1, 2, 3}, {1, 2, 3}},...                     
                 {{1, 3}, {1, 2, 3}},...                        
                 {{1, 2, 3}, {1, 2, 3}},...                      
                 {{1, 2, 3}, {1, 3}, {1, 2, 3}},...             
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...            
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...            
                 {{1, 2, 3}, {1, 2}, {1}},...                
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...      
                 {{1, 3}, {1, 2}},...                         
                 {{1, 2, 3}, {1, 2, 3}},...                 
                 {{1, 2, 3}, {1, 2, 3}},...                   
                 {{1, 2, 3}, {1, 2, 3}},...                     
                 {{1, 2, 3}, {3}}};                            
        date = {'21-Jun-2021', '23-Jun-2021','25-Jun-2021','28-Jun-2021',...
                '07-Jul-2021','12-Jul-2021','21-Jul-2021','20-Sep-2021',...
                '22-Sep-2021','27-Sep-2021', '29-Sep-2021','04-Oct-2021',...
                '06-Oct-2021','18-Oct-2021','20-Oct-2021','28-Oct-2021',...        
                '01-Nov-2021', '03-Nov-2021','08-Nov-2021','23-Nov-2021',...
                '29-Nov-2021','02-Dec-2021'};
    elseif strcmp(subject,'P3')
        session = [3, 5, 6, 7, 8, 9, 11, 12, 13, 13, 14, 14];
        stim_set = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {2}, {1}, {3}};
        block = {{3, 4, 5, 6}, {3, 4, 5, 6}, {3, 4, 5, 6, 7, 8}, {3, 4, 5, 6}, {3, 4}, {3, 4}, {3, 4}, {3, 4}, {3}, {3}, {3}, {4}};
        trials = {{{1, 2, 3}, {1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...
                  {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...
                  {{1, 2, 3}, {1, 2, 3}, {1, 2}, {1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...
                  {{1, 2, 3}, {1, 2}, {1, 2, 3}, {1, 2, 3}},...
                  {{1, 2, 3},{1, 2, 3}},...
                  {{1, 2, 3},{1, 2, 3}},...
                  {{2, 3, 4, 5}, {2, 4, 5}},...
                  {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                  {{1, 2, 3, 4, 5}},...
                  {{1, 2, 3, 4, 5}},...
                  {{1, 2, 3, 4, 5}},...
                  {{1, 2, 3, 4, 5}}};
        date = {'17-Aug-2021','09-Sep-2021','24-Sep-2021','28-Sep-2021','01-Oct-2021',...
                '07-Oct-2021','24-Nov-2021','18-Jan-2022','08-Feb-2022','08-Feb-2022','22-Mar-2022','22-Mar-2022'};
    elseif strcmp(subject,'C1')
        session = [1,1,2,3,4,5,6,7,8,8,9,10];
        stim_set = {{1},{2},{1},{1},{1},{1},{1},{1},{1},{2},{1},{1}};
        block = {{3},{3,4},{3,4},{3,4},{3,4},{3,4},{3,4},{3,4},{3},{4},{3,4},{3,4}};
        trials = {{{1,2,3,4,5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}}};
        date = {'15-Nov-2021','15-Nov-2021','20-Dec-2021','27-Dec-2021',...
                  '04-Jan-2022','07-Jan-2022','28-Jan-2022','14-Feb-2022',...
                  '21-Feb-2022','21-Feb-2022','11-Mar-2022','01-Apr-2022'};
    end

    % read in voltage data
    voltageData = jsondecode(fileread(fullfile(data_folder,subject,voltageFile)));

    % convert cell array voltage data into matrix
    a = [voltageData.voltageData.info{:}];
    S = sprintf('%s ', a{2:end,:});
    D = sscanf(S, '%f');
    C = reshape(D,[7,size(voltageData.voltageData.info,1)]);
    voltageDataMat = C';

    data = [];
    files = [];
    f = 1;
    for s=1:numel(session) % for each session
        datapath = fullfile(data_folder,subject,['session.',num2str(session(s))]);

        cd(datapath)
        for ss=1:numel(stim_set{s})
            for b=1:numel(block{s})
                for t=1:numel(trials{s}{b})
                    % chosen object parameters (object-sensation mapping)
                    trialFile = fullfile(['TrialSummary.Set000',num2str(stim_set{s}{ss}),'.Block000',num2str(block{s}{b}),'.Trial000',num2str(trials{s}{b}{t}),'.',date{s},'.json']);
                    trialData = jsondecode(fileread(trialFile));
                    object = trialData.trialInfo.object;
                    if strcmp(object,objects(1))
                        object = 1;
                    elseif strcmp(object,objects(2))
                        object = 2;
                    elseif strcmp(object,objects(3))
                        object = 3;
                    elseif strcmp(object,objects(4))
                        object = 4;
                    elseif strcmp(object,objects(5))
                        object = 5;
                    end

                    % satisfaction score
                    scoreFile = fullfile(['ObjectSensationMappingSatisfaction.Set000',num2str(stim_set{s}{ss}),'.Block000',num2str(block{s}{b}),'.Trial000',num2str(trials{s}{b}{t}),'.',date{s},'.json']);
                    if isfile(scoreFile)
                        scoreData = jsondecode(fileread(scoreFile));
                        satisfaction = round(scoreData.userInfo.satisfaction);
                    else
                        satisfaction = -1;
                    end

                    % starting position cursors
                    stimDataFile = fullfile(['StimData.Set000',num2str(stim_set{s}{ss}),'.Block000',num2str(block{s}{b}),'.Trial000',num2str(trials{s}{b}{t}),'.',date{s},'.json']);
                    stimData = jsondecode(fileread(stimDataFile));

                    initial_parameters = get_initial_parameters(stimData);
                    if strcmp(initial_parameters, 'no data available')
                        str_error = 'no data available'
                    else
                        % total time to complete trial
                        total_time = trialData.userInfo.total_time; % in seconds

                        % movement speed across object
                        median_velocity = trialData.userInfo.median_velocity;

                        % chosen object parameters (level)
                        parameters = get_final_parameters(trialData);

                        % chosen object parameters (actual)
                        actual_parameters = get_actual_parameters(trialData);

                        % total charge of last stim train
                        [total_charge, train_length, total_overlap, max_mode_amp, freq] = get_actual_stim_values(session(s), stim_set{s}{ss}, block{s}{b}, trials{s}{b}{t}, voltageDataMat);

                        % aggregate all data
                        data = [data; session(s) object satisfaction total_time median_velocity parameters total_charge train_length total_overlap max_mode_amp freq];
                        files{f} = trialFile;
                        f = f+1;
                   end
                end
            end
        end
    end

    data_labels = {'session','object','satisfaction','total_time','median_velocity',...
                   'final_amp','final_freq','final_bio','final_drag','total_charge_chan1',...
                   'total_charge_chan2','total_charge_chan3','train_length1','train_length2','train_length3',...
                   'total_overlap','max_mode_amp','freq'};

    % normalize satisfaction scores
    data(:,3) = (data(:,3) - (min(data(:,3)))) / (max(data(:,3))-min(data(:,3)))*100;

    % delete objects with satisfaction < 50
    idx = find(data(:,3)<50);
    perc_deleted_trials = numel(idx)/numel(data(:,3))*100
    data(idx,:) = [];
    files(idx) = [];

    cd(data_folder);
    save([subject,'_all_data.mat'],'data','data_labels')
end