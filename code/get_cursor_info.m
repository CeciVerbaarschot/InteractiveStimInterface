function get_cursor_info(data_folder, subject)
    % determine what data to load
    if strcmp(subject,'P2')
        session = [7 8 9 10 11 12 15 16 17 19 20 21 22 23 24 27 28 29 30 31 32 33]; 
        stim_set = {{1}, {1}, {3}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, ...
                    {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};           
        block = {{3, 4, 5}, {3, 4}, {3, 4}, {3, 4, 5}, {3, 4, 5, 6}, {3, 4}, ...          
                 {3, 4}, {3, 4}, {3, 4, 5}, {3, 4}, {3, 4}, {3, 4}, {3, 4, 5},...
                 {3, 4, 5}, {3, 4, 5}, {3, 4, 5}, {3, 4, 5}, {3, 4}, {3, 4}, ...
                 {3, 4}, {3, 4}, {3, 4}};
        trials = {{{1, 2, 3}, {1, 2, 3}, {1, 2}},...
                 {{1, 2, 3}, {1, 2, 3}}, ...
                 {{1, 2, 3}, {1, 2, 3}}, ...     
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}...       
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}, {1, 2, 3}},... 
                 {{1, 2, 3}, {1, 2, 3}},...                      
                 {{1, 2, 3}, {1, 2, 3}},...                    
                 {{1, 2, 3}, {1, 2, 3}},...                      
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...          
                 {{1, 2, 3}, {1, 2, 3}},...                     
                 {{1, 3}, {1, 2, 3}},...                        
                 {{1, 2, 3}, {1, 2, 3}},...                      
                 {{1, 2, 3}, {1, 3}, {1, 2, 3}},...             
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...            
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...            
                 {{1, 2, 3}, {1, 2}, {1}},...                
                 {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...      
                 {{1, 3}, {1, 2}},...                         
                 {{1, 2, 3}, {1, 2, 3}},...                 
                 {{1, 2, 3}, {1, 2, 3}},...                   
                 {{1, 2, 3}, {1, 2, 3}},...                     
                 {{1, 2, 3}, {3}}};                            
        date = {'21-Jun-2021', '23-Jun-2021','25-Jun-2021','28-Jun-2021',...
                '07-Jul-2021','12-Jul-2021','21-Jul-2021','20-Sep-2021',...
                '22-Sep-2021','27-Sep-2021', '29-Sep-2021','04-Oct-2021',...
                '06-Oct-2021','18-Oct-2021','20-Oct-2021','28-Oct-2021',...        
                '01-Nov-2021', '03-Nov-2021','08-Nov-2021','23-Nov-2021',...
                '29-Nov-2021','02-Dec-2021'};
    elseif strcmp(subject,'P3')
        session = [3, 5, 6, 7, 8, 9, 11, 12, 13, 13, 14, 14];
        stim_set = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {2}, {1}, {3}};
        block = {{3, 4, 5, 6}, {3, 4, 5, 6}, {3, 4, 5, 6, 7, 8}, {3, 4, 5, 6}, {3, 4}, {3, 4}, {3, 4}, {3, 4}, {3}, {3}, {3}, {4}};
        trials = {{{1, 2, 3}, {1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...
                  {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...
                  {{1, 2, 3}, {1, 2, 3}, {1, 2}, {1, 2, 3}, {1, 2, 3}, {1, 2, 3}},...
                  {{1, 2, 3}, {1, 2}, {1, 2, 3}, {1, 2, 3}},...
                  {{1, 2, 3},{1, 2, 3}},...
                  {{1, 2, 3},{1, 2, 3}},...
                  {{2, 3, 4, 5}, {2, 4, 5}},...
                  {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                  {{1, 2, 3, 4, 5}},...
                  {{1, 2, 3, 4, 5}},...
                  {{1, 2, 3, 4, 5}},...
                  {{1, 2, 3, 4, 5}}};
        date = {'17-Aug-2021','09-Sep-2021','24-Sep-2021','28-Sep-2021','01-Oct-2021',...
                '07-Oct-2021','24-Nov-2021','18-Jan-2022','08-Feb-2022','08-Feb-2022','22-Mar-2022','22-Mar-2022'};
    elseif strcmp(subject,'C1')
        session = [1,1,2,3,4,5,6,7,8,8,9,10];
        stim_set = {{1},{2},{1},{1},{1},{1},{1},{1},{1},{2},{1},{1}};
        block = {{3},{3,4},{3,4},{3,4},{3,4},{3,4},{3,4},{3,4},{3},{4},{3,4},{3,4}};
        trials = {{{1,2,3,4,5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}},...
                 {{1, 2, 3, 4, 5},{1, 2, 3, 4, 5}}};
        date = {'15-Nov-2021','15-Nov-2021','20-Dec-2021','27-Dec-2021',...
                  '04-Jan-2022','07-Jan-2022','28-Jan-2022','14-Feb-2022',...
                  '21-Feb-2022','21-Feb-2022','11-Mar-2022','01-Apr-2022'};
    end

    total_time = [];
    stim_on = [];
    perc_explored_left = [];
    perc_explored_right = [];
    for s=1:numel(session)
        datapath = fullfile(data_folder,subject,['session.',num2str(session(s))]);

        cd(datapath)
        for ss=1:numel(stim_set{s})
            for b=1:numel(block{s})
                for t=1:numel(trials{s}{b})
                    % object
                    trialFile = fullfile(['TrialSummary.Set000',num2str(stim_set{s}{ss}),'.Block000',num2str(block{s}{b}),'.Trial000',num2str(trials{s}{b}{t}),'.',date{s},'.json']);
                    trialData = jsondecode(fileread(trialFile));

                    stimFile = fullfile(['StimData.Set000',num2str(stim_set{s}{ss}),'.Block000',num2str(block{s}{b}),'.Trial000',num2str(trials{s}{b}{t}),'.',date{s},'.json']);
                    stimData = jsondecode(fileread(stimFile));

                    % find idx where participant felt stimulation (stim was on)
                    stim_on_idx = find(stimData.stimInfo.stimulating == 1);
                    perc_stim = numel(stim_on_idx)/numel(stimData.stimInfo.stimulating);

                    % total time to complete trial
                    t = seconds(trialData.userInfo.total_time);
                    t.Format = 'hh:mm:ss.SSS';
                    total_time = [total_time t];

                    stim_on = [stim_on perc_stim*t];

                    axes = stimData.trialInfo.axes;
                    order = stimData.trialInfo.order;

                    % find all amplitudes when stim was on
                    amp_on = stimData.stimInfo.amplitude(stim_on_idx,1);
                    amp_range = sort(stimData.stimInfo.amplitude_ch1);
                    if size(unique(amp_range),1) < 10
                        amp_on = stimData.stimInfo.amplitude(stim_on_idx,2);
                        amp_range = sort(stimData.stimInfo.amplitude_ch2);
                        if size(unique(amp_range),1) < 10
                            amp_on = stimData.stimInfo.amplitude(stim_on_idx,3);
                            amp_range = sort(stimData.stimInfo.amplitude_ch3);
                        end
                    end
                    % convert stim parameters to levels
                    [tf, amp_level] = ismember(amp_on,amp_range);
                    if order(2) == -1
                        amp_level = 11-amp_level;
                    end

                    % get frequencies when stim was on and convert to levels
                    freq_on = stimData.stimInfo.frequency(stim_on_idx);
                    freq_range = sort(floor(stimData.stimInfo.frequency_range));
                    [tf, freq_level] = ismember(freq_on,freq_range);
                    if order(1) == -1
                        freq_level = 11-freq_level;
                    end

                    % same for bio
                    bio_on = stimData.stimInfo.biomimetic_factor(stim_on_idx);
                    bio_range = sort(stimData.stimInfo.biomimetic_range);
                    [tf, bio_level] = ismember(bio_on,bio_range);
                    if order(3) == -1
                        bio_level = 11-bio_level;
                    end

                    % same for drag
                    drag_on = stimData.stimInfo.drag(stim_on_idx);
                    drag_range = sort(stimData.stimInfo.drag_range);
                    [tf, drag_level] = ismember(drag_on,drag_range);
                    drag_level = drag_level;
                    if order(4) == -1
                        drag_level = 11-drag_level;
                    end

                    % get all parameter frequencies in one matrix
                    left_counts = zeros(10,10);
                    right_counts = zeros(10,10);
                    for i=1:numel(amp_level) % all parameters inputs (amp_level, freq_level, etc.) are the same size
                        all_params = [freq_level(i) amp_level(i) bio_level(i) drag_level(i)];
                        all_params = all_params(axes+1);
                        left_counts(all_params(1), all_params(2)) = left_counts(all_params(1), all_params(2)) + 1;
                        right_counts(all_params(3), all_params(4)) = right_counts(all_params(3), all_params(4)) + 1;
                    end
                    perc_explored_left = [perc_explored_left sum(sum(left_counts>1))/100*100];
                    perc_explored_right = [perc_explored_right sum(sum(right_counts>1))/100*100];
               end
            end
        end
    end

    save('cursor_data.mat','perc_explored_left','perc_explored_right','stim_on','total_time')
end


                